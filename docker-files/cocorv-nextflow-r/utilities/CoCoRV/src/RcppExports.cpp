// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// calculateESCpp
double calculateESCpp(NumericVector score, LogicalVector inSet, std::string scoreType);
RcppExport SEXP _CoCoRV_calculateESCpp(SEXP scoreSEXP, SEXP inSetSEXP, SEXP scoreTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type inSet(inSetSEXP);
    Rcpp::traits::input_parameter< std::string >::type scoreType(scoreTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateESCpp(score, inSet, scoreType));
    return rcpp_result_gen;
END_RCPP
}
// calculateESCppFast
NumericVector calculateESCppFast(NumericVector score, LogicalVector inSet, std::string scoreType, double p, bool returnLeadingEdge);
RcppExport SEXP _CoCoRV_calculateESCppFast(SEXP scoreSEXP, SEXP inSetSEXP, SEXP scoreTypeSEXP, SEXP pSEXP, SEXP returnLeadingEdgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type inSet(inSetSEXP);
    Rcpp::traits::input_parameter< std::string >::type scoreType(scoreTypeSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLeadingEdge(returnLeadingEdgeSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateESCppFast(score, inSet, scoreType, p, returnLeadingEdge));
    return rcpp_result_gen;
END_RCPP
}
// GSEACpp
NumericMatrix GSEACpp(List pathway, NumericVector scoresNull, int nGenes, int nReplicate, NumericVector scoreObserved, std::string scoreType, int maxExtreme, int maxPermutation, double p);
RcppExport SEXP _CoCoRV_GSEACpp(SEXP pathwaySEXP, SEXP scoresNullSEXP, SEXP nGenesSEXP, SEXP nReplicateSEXP, SEXP scoreObservedSEXP, SEXP scoreTypeSEXP, SEXP maxExtremeSEXP, SEXP maxPermutationSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pathway(pathwaySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scoresNull(scoresNullSEXP);
    Rcpp::traits::input_parameter< int >::type nGenes(nGenesSEXP);
    Rcpp::traits::input_parameter< int >::type nReplicate(nReplicateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scoreObserved(scoreObservedSEXP);
    Rcpp::traits::input_parameter< std::string >::type scoreType(scoreTypeSEXP);
    Rcpp::traits::input_parameter< int >::type maxExtreme(maxExtremeSEXP);
    Rcpp::traits::input_parameter< int >::type maxPermutation(maxPermutationSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(GSEACpp(pathway, scoresNull, nGenes, nReplicate, scoreObserved, scoreType, maxExtreme, maxPermutation, p));
    return rcpp_result_gen;
END_RCPP
}
// calculateProbCpp
NumericVector calculateProbCpp(NumericMatrix p);
RcppExport SEXP _CoCoRV_calculateProbCpp(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateProbCpp(p));
    return rcpp_result_gen;
END_RCPP
}
// oddsRatioToParCpp
NumericVector oddsRatioToParCpp(NumericVector ORPar);
RcppExport SEXP _CoCoRV_oddsRatioToParCpp(SEXP ORParSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ORPar(ORParSEXP);
    rcpp_result_gen = Rcpp::wrap(oddsRatioToParCpp(ORPar));
    return rcpp_result_gen;
END_RCPP
}
// dmultinomCpp
double dmultinomCpp(IntegerVector observed, NumericVector probability, bool useLog);
RcppExport SEXP _CoCoRV_dmultinomCpp(SEXP observedSEXP, SEXP probabilitySEXP, SEXP useLogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probability(probabilitySEXP);
    Rcpp::traits::input_parameter< bool >::type useLog(useLogSEXP);
    rcpp_result_gen = Rcpp::wrap(dmultinomCpp(observed, probability, useLog));
    return rcpp_result_gen;
END_RCPP
}
// negativeLogLikCpp
double negativeLogLikCpp(NumericVector par, IntegerMatrix data);
RcppExport SEXP _CoCoRV_negativeLogLikCpp(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(negativeLogLikCpp(par, data));
    return rcpp_result_gen;
END_RCPP
}
// negativeLogLikGenotypeCpp
double negativeLogLikGenotypeCpp(NumericVector par, NumericVector data);
RcppExport SEXP _CoCoRV_negativeLogLikGenotypeCpp(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(negativeLogLikGenotypeCpp(par, data));
    return rcpp_result_gen;
END_RCPP
}
// negativeLogLikGradCpp
NumericVector negativeLogLikGradCpp(NumericVector par, IntegerMatrix data);
RcppExport SEXP _CoCoRV_negativeLogLikGradCpp(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(negativeLogLikGradCpp(par, data));
    return rcpp_result_gen;
END_RCPP
}
// negativeLogLikGenotypeGradCpp
NumericVector negativeLogLikGenotypeGradCpp(NumericVector par, NumericVector data);
RcppExport SEXP _CoCoRV_negativeLogLikGenotypeGradCpp(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(negativeLogLikGenotypeGradCpp(par, data));
    return rcpp_result_gen;
END_RCPP
}
// twoSidedP
NumericVector twoSidedP(NumericVector p);
RcppExport SEXP _CoCoRV_twoSidedP(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(twoSidedP(p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CoCoRV_calculateESCpp", (DL_FUNC) &_CoCoRV_calculateESCpp, 3},
    {"_CoCoRV_calculateESCppFast", (DL_FUNC) &_CoCoRV_calculateESCppFast, 5},
    {"_CoCoRV_GSEACpp", (DL_FUNC) &_CoCoRV_GSEACpp, 9},
    {"_CoCoRV_calculateProbCpp", (DL_FUNC) &_CoCoRV_calculateProbCpp, 1},
    {"_CoCoRV_oddsRatioToParCpp", (DL_FUNC) &_CoCoRV_oddsRatioToParCpp, 1},
    {"_CoCoRV_dmultinomCpp", (DL_FUNC) &_CoCoRV_dmultinomCpp, 3},
    {"_CoCoRV_negativeLogLikCpp", (DL_FUNC) &_CoCoRV_negativeLogLikCpp, 2},
    {"_CoCoRV_negativeLogLikGenotypeCpp", (DL_FUNC) &_CoCoRV_negativeLogLikGenotypeCpp, 2},
    {"_CoCoRV_negativeLogLikGradCpp", (DL_FUNC) &_CoCoRV_negativeLogLikGradCpp, 2},
    {"_CoCoRV_negativeLogLikGenotypeGradCpp", (DL_FUNC) &_CoCoRV_negativeLogLikGenotypeGradCpp, 2},
    {"_CoCoRV_twoSidedP", (DL_FUNC) &_CoCoRV_twoSidedP, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CoCoRV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
